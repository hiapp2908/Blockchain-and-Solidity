Solidity

##First Smart Contract (Simple Storage)


**Defining Version 

We have to define version in order to make compiler ready for the type of contract we are writing.
This is an evolving language right now so we have to specify which version we have written our code for.

To specify Single version
pragma  solidity 0.6.0;

To specify a single number of version
pragma solidity ^0.6.0;  //That means from 0.6.0 to 0.6.99

To specify a range of versions
pragma solidity >=0.6.0 <0.9.0; ////That means from 0.6.0 to 0.9.0 (not including 0.9.0).

**CONTRACT 

We can make contracts
contract SimpleStorage {
	
	uint256 damn = 5;
	uint256 number;
}

Variable damn has value of 5 and type uint256. We must specify the type of variable in solidity before initializing it.

In above example we just created a contract which has a variable 'number' which can store uint256 number value.
By initializing this way we can assign its value later  

All variables have a scope of the curly brackets they are confined in.

BASIC TYPES

uint256 :- This can store value upto 256 bits 0 to 255 bits integer but no negative value

int256 :- This can store value upto 256 bits -128 to 128 bits integer including negative values.

bool:- These variables can store values of TRUE and FALSE for logical outputs.

string:- This is a string of text these can not perform any operations.

address :- This includes address which can be accessed.

bytes32 :- This can make bytes of data. It can be anything from bytes 2 to 32.

**FUNCTIONS 

function store (uint256 requested_amount)public {
	request = requested_amount;
}

this is a function which perform an action, in this specific case store a amount in request variable. 

In this function we are taking input parameter requested-amount of type uint256. The scope of request variable will be local within this function.

retrieve function is something that returns the value from a contract. eg:- 

function retrieve() public returns(uint256){
	return number;
}

you have to define the variable type that is supposed to be returned by the retrieve function.

**VISIBILITY 

There are mainly 4 different types of visibility of variables and functions in solidity.

1. public :- This is used when we want to make a function or variable shown to all. These functions can be called internally in the contract or via messages.

2. external:- This is used when we make functions and variables accessible to external contracts and it cannot be called internally.

3.internal:- This is the default value in solidity. These functions and variables can be accessed within the contracts or the contracts derived from it.

4.private:- This is used for most private functions as this is visible only in the contract that has defined it and not even to the contract deriving from it.

**VIEWS

view is a function which shows the variables and values in it. public function when called it assign view to the variable or function.

pure function can do some calculation but doesn't save anything. Thats why it doesn't cost any gas. 

**STRUCT

struct:- defines the structure of a type of object with defined attributes.Eg:-

struct Requestee{
	string requestee_name;
	uint256 request_amount;
	address requestee_address;
}

then we create different objects whith this structure 

Requestee public req_1 = Requestee({requestee_name: Vish,request_amount:10,requestee_address: 0xhbdbvhkbckcjbakhbcabhcjbhacbhkjdkc})

**ARRAY

It is a way of storing same type of objects or variables.

Requestee[] public people;

its a dynamic array which can be of any size. If you want to limit the size of the array put the limit in the bracket and then it will allow only that many variables in the array.

*$ Making a function to add requestee

function add_request(string memory name_, uint256 request_amount_, address requestee_address_)public"{
	people.push(Requestee({requestee_name: name_,request_amount:request_amount_,requestee_address: requestee_address_}))	
}

**MEMORY

The storage is of 2 types in solidity, 

"memory" stores the value at the time of contract execution after that it'll be deleted.
"storage" stores the value of variables in more permanent fashion in the blockchain.

(string in solidity is the special object which is an array of bytes that means it requires storage so for temprary storage we have to assign "memory" keyword with string type)



Final Contract 

pragma solidity >=0.6.0 <0.9.0;

contract SimpleStorage {
	
	uint256 public amount;
	string public name;
	address public destination;
	
	function request(uint256 amount_, string name_, address destination_) public{
		amount = amount_;
		name  = name_;
		destination = destination_;
	}
	
}
